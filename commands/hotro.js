const { 
  SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, 
  ModalBuilder, TextInputBuilder, TextInputStyle, ChannelType, PermissionFlagsBits 
} = require('discord.js');

function checkBotPermissions(channel, requiredPermissions, commandName) {
  const botPermissions = channel.permissionsFor(channel.client.user);
  const missingPermissions = requiredPermissions.filter(perm => !botPermissions.has(perm));
  if (missingPermissions.length > 0) {
    const missing = missingPermissions.map(p => Object.keys(PermissionFlagsBits).find(key => PermissionFlagsBits[key] === p)).join(', ');
    return { valid: false, missing };
  }
  return { valid: true };
}

function createSupportEmbed(title, description, color) {
  return new EmbedBuilder()
    .setTitle(`üì© ${title}`)
    .setDescription(description)
    .setColor(color)
    .setTimestamp()
    .setFooter({ text: 'H·ªá Th·ªëng H·ªó Tr·ª£' });
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('hotro')
    .setDescription('T·∫°o ticket h·ªó tr·ª£ v·ªõi ƒë·ªôi ng≈© admin.'),
  async initPrompt(client, config) {
    const supportPromptChannel = client.channels.cache.get(config.supportChannelId);
    if (supportPromptChannel) {
      try {
        const messages = await supportPromptChannel.messages.fetch({ limit: 100 });
        for (const message of messages.values()) {
          if (message.author.id === client.user.id && message.components.length > 0) {
            await message.delete();
            console.log('ƒê√£ x√≥a tin nh·∫Øn c≈© ch·ª©a n√∫t h·ªó tr·ª£');
          }
        }
      } catch (error) {
        console.error('L·ªói khi x√≥a tin nh·∫Øn c≈© trong k√™nh h·ªó tr·ª£:', error);
      }

      const embed = createSupportEmbed(
        'H·ªá Th·ªëng Ticket H·ªó Tr·ª£',
        'Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ g·ª≠i y√™u c·∫ßu h·ªó tr·ª£ cho admin.',
        0x00bfff // M√†u xanh d∆∞∆°ng
      );

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('hotro_button')
          .setLabel('üÜò G·ª≠i H·ªó Tr·ª£')
          .setStyle(ButtonStyle.Primary)
      );

      try {
        await supportPromptChannel.send({ embeds: [embed], components: [row] });
        console.log('ƒê√£ g·ª≠i tin nh·∫Øn g·ª£i √Ω h·ªó tr·ª£ ƒë·∫øn k√™nh ');
      } catch (error) {
        console.error('L·ªói khi g·ª≠i tin nh·∫Øn g·ª£i √Ω h·ªó tr·ª£:', error);
      }
    } else {
      console.error('Kh√¥ng t√¨m th·∫•y k√™nh v·ªõi ID ');
    }
  },
  async execute(interaction, client, confessionCounter, incrementCounter, config) {
    // X·ª≠ l√Ω l·ªánh /hotro
    if (interaction.isCommand()) {
      const requiredPermissions = [
        PermissionFlagsBits.SendMessages,
        PermissionFlagsBits.EmbedLinks,
        PermissionFlagsBits.ViewChannel
      ];
      const permissionCheck = checkBotPermissions(interaction.channel, requiredPermissions, 'H·ªó Tr·ª£');
      if (!permissionCheck.valid) {
        return interaction.reply({
          content: `‚ùå Kh√¥ng th·ªÉ t·∫°o ticket! Bot thi·∫øu quy·ªÅn: ${permissionCheck.missing}`,
          flags: 64
        });
      }

      const embed = createSupportEmbed(
        'H·ªá Th·ªëng Ticket H·ªó Tr·ª£',
        'Tin nh·∫Øn h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i trong k√™nh <#' + (config.supportChannelId) + '>. Nh·∫•n n√∫t "G·ª≠i H·ªó Tr·ª£" t·∫°i ƒë√≥ ƒë·ªÉ t·∫°o ticket.',
        0x00bfff // M√†u xanh d∆∞∆°ng
      );

      await interaction.reply({ embeds: [embed], flags: 64 });
    }

    // X·ª≠ l√Ω n√∫t g·ª≠i h·ªó tr·ª£
    if (interaction.isButton() && interaction.customId === 'hotro_button') {
      const modal = new ModalBuilder()
        .setCustomId('hotro_modal')
        .setTitle('T·∫°o Ticket H·ªó Tr·ª£');

      const titleInput = new TextInputBuilder()
        .setCustomId('hotro_title')
        .setLabel('Ti√™u ƒë·ªÅ (t·ªëi ƒëa 100 k√Ω t·ª±)')
        .setStyle(TextInputStyle.Short)
        .setMaxLength(100)
        .setRequired(true)
        .setPlaceholder('Nh·∫≠p ti√™u ƒë·ªÅ v·∫•n ƒë·ªÅ...');

      const contentInput = new TextInputBuilder()
        .setCustomId('hotro_content')
        .setLabel('N·ªôi dung h·ªó tr·ª£ (t·ªëi ƒëa 1000 k√Ω t·ª±)')
        .setStyle(TextInputStyle.Paragraph)
        .setMaxLength(1000)
        .setRequired(true)
        .setPlaceholder('M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ c·ªßa b·∫°n...');

      const titleRow = new ActionRowBuilder().addComponents(titleInput);
      const contentRow = new ActionRowBuilder().addComponents(contentInput);
      modal.addComponents(titleRow, contentRow);

      await interaction.showModal(modal);
    }

    // X·ª≠ l√Ω modal g·ª≠i ticket
    if (interaction.isModalSubmit() && interaction.customId === 'hotro_modal') {
      const title = interaction.fields.getTextInputValue('hotro_title').trim();
      const content = interaction.fields.getTextInputValue('hotro_content').trim();
      const guild = interaction.guild;
      const user = interaction.user;

      // Ki·ªÉm tra quy·ªÅn t·∫°o k√™nh
      const requiredPermissions = [
        PermissionFlagsBits.ManageChannels,
        PermissionFlagsBits.ViewChannel,
        PermissionFlagsBits.SendMessages,
        PermissionFlagsBits.EmbedLinks
      ];
      const permissionCheck = checkBotPermissions(interaction.channel, requiredPermissions, 'T·∫°o K√™nh H·ªó Tr·ª£');
      if (!permissionCheck.valid) {
        return interaction.reply({
          content: `‚ùå Kh√¥ng th·ªÉ t·∫°o ticket! Bot thi·∫øu quy·ªÅn: ${permissionCheck.missing}`,
          flags: 64
        });
      }

      // Ki·ªÉm tra ƒë√£ c√≥ ticket ch∆∞a
      const existing = guild.channels.cache.find(
        c => c.name === `hotro-${user.id}` && c.type === ChannelType.GuildText
      );
      if (existing) {
        const embed = createSupportEmbed(
          'Ticket ƒê√£ T·ªìn T·∫°i',
          `B·∫°n ƒë√£ c√≥ m·ªôt ticket m·ªü t·∫°i: <#${existing.id}>`,
          0xffa500 // M√†u cam
        );
        return interaction.reply({ embeds: [embed], flags: 64 });
      }

      // T·∫°o ticket m·ªõi
      try {
        const ticketChannel = await guild.channels.create({
          name: `hotro-${user.id}`,
          type: ChannelType.GuildText,
          topic: `Ticket c·ªßa ${user.tag} - ${user.id}`,
          permissionOverwrites: [
            { id: guild.roles.everyone, deny: [PermissionFlagsBits.ViewChannel] },
            { 
              id: user.id, 
              allow: [
                PermissionFlagsBits.ViewChannel, 
                PermissionFlagsBits.SendMessages, 
                PermissionFlagsBits.AttachFiles, 
                PermissionFlagsBits.ReadMessageHistory
              ] 
            },
            { 
              id: client.user.id, 
              allow: [
                PermissionFlagsBits.ViewChannel, 
                PermissionFlagsBits.SendMessages, 
                PermissionFlagsBits.ManageChannels, 
                PermissionFlagsBits.EmbedLinks
              ] 
            }
            // N·∫øu c√≥ role admin, th√™m v√†o ƒë√¢y
            // { id: 'ADMIN_ROLE_ID_HERE', allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageChannels] }
          ]
        });

        const embed = createSupportEmbed(
          `Ticket H·ªó Tr·ª£: ${title}`,
          `**Ng∆∞·ªùi d√πng:** <@${user.id}>\n**N·ªôi dung:**\n${content}\n\nüïê **Th·ªùi gian:** <t:${Math.floor(Date.now() / 1000)}:F>`,
          0x00bfff // M√†u xanh d∆∞∆°ng
        );

        const closeRow = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId('close_ticket')
            .setLabel('üîí ƒê√≥ng Ticket')
            .setStyle(ButtonStyle.Danger)
        );

        await ticketChannel.send({ content: `<@${user.id}>`, embeds: [embed], components: [closeRow] });

        return interaction.reply({
          embeds: [createSupportEmbed('Ticket ƒê√£ T·∫°o', `‚úÖ Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m·ªü t·∫°i <#${ticketChannel.id}>`, 0x00ff00)], // M√†u xanh l√°
          flags: 64
        });
      } catch (error) {
        console.error('L·ªói khi t·∫°o k√™nh h·ªó tr·ª£:', error);
        return interaction.reply({
          embeds: [createSupportEmbed('L·ªói T·∫°o Ticket', 'C√≥ l·ªói x·∫£y ra khi t·∫°o ticket h·ªó tr·ª£!', 0xff0000)], // M√†u ƒë·ªè
          flags: 64
        });
      }
    }

    // X·ª≠ l√Ω n√∫t ƒë√≥ng ticket
    if (interaction.isButton() && interaction.customId === 'close_ticket') {
      try {
        await interaction.channel.delete();
      } catch (error) {
        console.error('L·ªói khi ƒë√≥ng ticket:', error);
        await interaction.reply({
          content: 'C√≥ l·ªói x·∫£y ra khi ƒë√≥ng ticket!',
          flags: 64
        });
      }
    }
  }
};